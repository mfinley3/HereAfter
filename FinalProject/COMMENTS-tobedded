JavaDoc Comments - to be added

1) IN GAME CONTROLLER

	/**
	 * Sets the current player to be the player that is passed in.
	 * Used when loading in an old game.
	 */
	public void setCurrentPlayer(Player player)
	
	/**
	 * Sets if it is the player's turn to move or not.
	 * 
	 * @param whosTurn, if it is the player's turn.
	 */
	public void setPlayerTurn(boolean whosTurn)

	/**
	 * Sets if the current unit has attacked.
	 * 
	 * @param hasAttacked: the boolean value to work
	 */
	public void setHasAttacked(boolean hasAttacked)

	/**
	 * Sets if the current unit has been selected.
	 */
	public void setCurrentUnitSelected(boolean v)
	
	/**
	 * Runs through all of the enemy units, moving them near or attacking the closest player unit. Calls the list from the AI class, and iterates through them
	 */
	public synchronized void enemyTurn()
	
	/**
	 * Have it attack a target. Checks to see if the target is in range. If it is, attack. If the target is not, do nothing. Attack uses endRow, endCol, etc.
	 */
	 attack()
	 
	/**
	 * After a player's unit moves, checks to see if it can attack a nearby enemy unit. If it can, ask if it can attack again. If yes, attack.
	 */
	 private void attackAfterMove() 
	 
	/**
	 * Checks the space below the current unit to see if it has an item. If it does, pick it up.
	 */
	 private void pickUpItem() 
	 
	 
2) Map

	/**
	 * @return the goodUnitPositions
	 */
	public List<Point> getGoodUnitPositions()

	/**
	 * @return the enemyUnitPositions
	 */
	public List<Point> getEnemyUnitPositions()

	/**
	 * Gets the unit at the requested location.
	 *
	 * @param row
	 *            The row of the requested unit.
	 * @param col
	 *            The column of the requested unit.
	 * @return Returns the 'full' Unit at requested spot.
	 */
	public Unit getUnitAt(int row, int col)

	/**
	 * Method to get the array of spaces in other words the actual map.
	 *
	 * @return map Map is the Space[][].
	 */
	public Space[][] getSpaces()

	public Item[][] getItems()
	
	/**
	 * Method to get the array of Units in other words the Units on the map.
	 *
	 * @return unitsOnMap unitsOnMap is the Unit[][]
	 */
	public Unit[][] getUnits()

	/**
	 * Checks if the requested space is occupied.
	 *
	 * @param row
	 *            The row of the requested space.
	 * @param column
	 *            the column of the requested space.
	 * @return True If the space is occupied.
	 */
	public boolean isOccupied(int row, int column)

	/**
	 * Gets the space in the map at the requested spot.
	 *
	 * @param row
	 *            The row of the requested space.
	 * @param column
	 *            The column of the requested space.
	 * @return The space at the requested spot.
	 */
	public Space getSpace(int row, int column)

	/**
	 * Gets the enemy units.
	 *
	 * @return The list of enemy units
	 */
	public List<Unit> getEnemyUnits()

	/**
	 * Resets all the spaces in map so they can't be moved to.
	 */
	public void resetMapCanMove()

	/**
	 * Removes the unit from the map.
	 *
	 * @param row
	 *            the row of the unit that needs to be removed.
	 * @param col
	 *            the column of the unit that needs to be removed.
	 */
	public void removeUnit(int row, int col)

	/**
	 * @param isPlayerTurn
	 *            the isPlayerTurn to set
	 */
	public void setIsPlayerTurn()

	/**
	 * A method that can be called from any class to get the the GUI to update
	 * the map.
	 */
	public void updateObservers()

	public String toString()
	
	public void coverUpHole(int row, int col)

	public void removeItem(int row, int col)
	
	public void setScaleFactor(double scaleFactor)